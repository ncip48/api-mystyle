router.post("/sign-up", middleware.validateRegister, (req, res, next) => {
  db.query(
    `SELECT * FROM users WHERE LOWER(username) = LOWER(${db.escape(
      req.body.username
    )});`,
    (err, result) => {
      if (result.length) {
        return res.status(409).send({
          msg: "This username is already in use!",
        });
      } else {
        if (err) {
          return res.status(500).send({
            msg: err,
          });
        } else {
          db.query(
            `INSERT INTO users (id, username, password, registered) VALUES ('${uuid.v4()}', ${db.escape(
              req.body.username
            )}, ${db.escape(hash)}, now())`,
            (err, result) => {
              if (err) {
                throw err;
                return res.status(400).send({
                  msg: err,
                });
              }
              return res.status(201).send({
                msg: "Registered!",
              });
            }
          );
        }
      }
    }
  );
});
router.post("/login", (req, res, next) => {
  let username = req.body.username;
  let password = req.body.password;
  let query =
    "SELECT * FROM tb_user WHERE username='" +
    username +
    "' AND password='" +
    hashpw(password) +
    "'";
  db.query(query, (err, result) => {
    if (err) {
      throw err;
      return res.status(400).send({
        result: 0,
        msg: err,
      });
    }
    if (!result.length) {
      return res.status(401).send({
        result: 0,
        msg: "Username or password is incorrect!",
      });
    } else {
      const token = jwt.sign(
        {
          username: result[0].username,
          id_user: result[0].id_user,
        },
        process.env.SECRET,
        {
          expiresIn: "1d",
        }
      );
      return res.status(200).send({
        result: 1,
        token,
        user: result[0],
      });
    }
  });
});
router.get("/auto_login", middleware.authorization, (req, res, next) => {
  res.status(200).send({
    result: 1,
    data: req.userData,
  });
});
module.exports = router;
